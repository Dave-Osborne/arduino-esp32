{
  "title": "16 errors, 4 fail, 26 pass in 3h 20m 24s",
  "summary": "190 files  190 suites   3h 20m 24s ⏱️\n 46 tests  26 ✅ 0 💤  4 ❌ 16 🔥\n238 runs   98 ✅ 0 💤 75 ❌ 65 🔥\n\nResults for commit 7575fa0c.\n",
  "conclusion": "failure",
  "stats": {
    "files": 190,
    "errors": [],
    "suites": 190,
    "duration": 12024,
    "suite_details": [
      {
        "name": "performance_hardware_esp32c3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_wifi2",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_democfg1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_touch0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_psram0",
        "tests": 8,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_i2c_master0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      }
    ],
    "tests": 46,
    "tests_succ": 26,
    "tests_skip": 0,
    "tests_fail": 4,
    "tests_error": 16,
    "runs": 238,
    "runs_succ": 98,
    "runs_skip": 0,
    "runs_fail": 75,
    "runs_error": 65,
    "commit": "7575fa0ce8fc8eb3cf886fe28ef1bd881cbbe01d"
  },
  "annotations": [
    {
      "path": "performance.ramspeed.test_ramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32/ramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32c3/ramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32s2/ramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32s3/ramspeed.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_ramspeed (performance.ramspeed.test_ramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f7daef910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f7d7ac4c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f7d717d00>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f7e3b64d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f7daef370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f7d7ac4c0>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-37-53-129376/test_ramspeed', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.fibonacci.test_fibonacci",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32/fibonacci.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32c3/fibonacci.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32s2/fibonacci.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32s3/fibonacci.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_fibonacci (performance.fibonacci.test_fibonacci)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f9f0d7910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f9ed944c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f9ecfbe20>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f9f9a64d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f9f0d7370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f9ed944c0>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-34-38-583126/test_fibonacci', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.nvs.test_nvs",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/nvs/esp32/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32-validation/validation/nvs/esp32/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/nvs/esp32c3/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/nvs/esp32c3/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/nvs/esp32c6/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/nvs/esp32c6/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/nvs/esp32c6/nvs2.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/nvs/esp32c6/nvs3.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/nvs/esp32h2/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/nvs/esp32h2/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/nvs/esp32h2/nvs2.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/nvs/esp32h2/nvs3.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/nvs/esp32p4/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/nvs/esp32p4/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/nvs/esp32p4/nvs2.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/nvs/esp32p4/nvs3.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/nvs/esp32s2/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/nvs/esp32s2/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/nvs/esp32s3/nvs0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/nvs/esp32s3/nvs1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/nvs/esp32s3/nvs2.xml [took 30s]",
      "title": "21 out of 42 runs failed: test_nvs (validation.nvs.test_nvs)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"Current counter value: 0\"\nBytes in current buffer (color code eliminated): ps://wokwi.com/pricing.\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-28-45-183068/test_nvs/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd42b4b5be0>\npattern = 'Current counter value: 0', expect_all = False, not_matching = ()\nargs = (), kwargs = {}, patterns = ['Current counter value: 0'], res = []\ndebug_str = 'Not found \"Current counter value: 0\"\\nBytes in current buffer (color code eliminated): ps://wokwi.com/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-28-45-183068/test_nvs/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:153: in expect_exact\n    return self.pexpect_proc.expect_exact(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:432: in expect_exact\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7fd42b4b6120>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7fd42b4b5160>\\nsearcher: searcher_string:\\n    0: b'Current counter value: 0'\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7fd42b4b5160>\nE           searcher: searcher_string:\nE               0: b'Current counter value: 0'\nE           <pytest_embedded.log.PexpectProcess object at 0x7fd42b4b5160>\nE           searcher: searcher_string:\nE               0: b'Current counter value: 0'\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd42b4b5be0>\n\n    def test_nvs(dut):\n        LOGGER = logging.getLogger(__name__)\n    \n        LOGGER.info(\"Expecting counter value 0\")\n>       dut.expect_exact(\"Current counter value: 0\")\n\ntests/validation/nvs/test_nvs.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd42b4b5be0>\npattern = 'Current counter value: 0', expect_all = False, not_matching = ()\nargs = (), kwargs = {}, patterns = ['Current counter value: 0'], res = []\ndebug_str = 'Not found \"Current counter value: 0\"\\nBytes in current buffer (color code eliminated): ps://wokwi.com/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-28-45-183068/test_nvs/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"Current counter value: 0\"\nE               Bytes in current buffer (color code eliminated): ps://wokwi.com/pricing.\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-28-45-183068/test_nvs/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.nvs.test_nvs",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/nvs/esp32/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c3/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c3/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs2.xml [took 20s]",
      "title": "9 out of 42 runs with error: test_nvs (validation.nvs.test_nvs)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fb582b340>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fb54ec220>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fb5453c70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fb60d6a70>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fb5828e20>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fb54ec220>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-59-37-865366/test_nvs', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.wifi.test_wifi",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/wifi/esp32/wifi0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32-validation/validation/wifi/esp32/wifi1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/wifi/esp32c3/wifi.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/wifi/esp32c6/wifi.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/wifi/esp32s2/wifi0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/wifi/esp32s2/wifi1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/wifi/esp32s3/wifi0.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/wifi/esp32s3/wifi1.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/wifi/esp32s3/wifi2.xml [took 30s]",
      "title": "All 9 runs failed: test_wifi (validation.wifi.test_wifi)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"Scan start\"\nBytes in current buffer (color code eliminated): /pricing.\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-55-46-549427/test_wifi/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f699f431be0>\npattern = 'Scan start', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Scan start'], res = []\ndebug_str = 'Not found \"Scan start\"\\nBytes in current buffer (color code eliminated): /pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-55-46-549427/test_wifi/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:153: in expect_exact\n    return self.pexpect_proc.expect_exact(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:432: in expect_exact\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f699f432120>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f699f431160>\\nsearcher: searcher_string:\\n    0: b'Scan start'\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f699f431160>\nE           searcher: searcher_string:\nE               0: b'Scan start'\nE           <pytest_embedded.log.PexpectProcess object at 0x7f699f431160>\nE           searcher: searcher_string:\nE               0: b'Scan start'\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f699f431be0>\n\n    def test_wifi(dut):\n        LOGGER = logging.getLogger(__name__)\n    \n        LOGGER.info(\"Starting WiFi Scan\")\n>       dut.expect_exact(\"Scan start\")\n\ntests/validation/wifi/test_wifi.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f699f431be0>\npattern = 'Scan start', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Scan start'], res = []\ndebug_str = 'Not found \"Scan start\"\\nBytes in current buffer (color code eliminated): /pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-55-46-549427/test_wifi/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"Scan start\"\nE               Bytes in current buffer (color code eliminated): /pricing.\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-55-46-549427/test_wifi/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.timer.test_timer",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/timer/esp32/timer.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32c3/timer.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32s2/timer.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32s3/timer.xml [took 20s]",
      "title": "4 out of 11 runs with error: test_timer (validation.timer.test_timer)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f98c67190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f98967f70>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f9888fc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f9952d810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f98c67850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f98967f70>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-54-12-339141/test_timer', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.timer.test_timer",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/timer/esp32/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/timer/esp32c3/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/timer/esp32c6/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/timer/esp32h2/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/timer/esp32p4/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/timer/esp32s2/timer.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/timer/esp32s3/timer.xml [took 4m 0s]",
      "title": "7 out of 11 runs failed: test_timer (validation.timer.test_timer)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... ESP-ROM:esp32c3-api1-20210207 Build:Feb 7 2021 rst:0x1... (total 579 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-31-19-656479/test_timer/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6ca22f5be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 579 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-31-19-656479/test_timer/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f6ca22f5fd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f6ca22f5160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f6ca22f5160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7f6ca22f5160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6ca22f5be0>\n\n    def test_timer(dut):\n>       dut.expect_unity_test_output(timeout=240)\n\ntests/validation/timer/test_timer.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6ca22f5be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 579 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-31-19-656479/test_timer/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... ESP-ROM:esp32c3-api1-20210207 Build:Feb 7 2021 rst:0x1... (total 579 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-31-19-656479/test_timer/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.periman.test_periman",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/periman/esp32/periman.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32c3/periman.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32s2/periman.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32s3/periman.xml [took 20s]",
      "title": "4 out of 6 runs with error: test_periman (validation.periman.test_periman)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fb48d7190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fb45d7f70>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fb44ffbe0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fb519d810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fb48d7850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fb45d7f70>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-53-07-498666/test_periman', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.gpio.test_gpio",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/gpio/esp32/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/gpio/esp32c3/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/gpio/esp32c6/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/gpio/esp32h2/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/gpio/esp32p4/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/gpio/esp32s2/gpio.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/gpio/esp32s3/gpio.xml [took 30s]",
      "title": "All 7 runs failed: test_gpio (validation.gpio.test_gpio)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"Button test\"\nBytes in current buffer (color code eliminated): m/pricing.\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-16-35-122778/test_gpio/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6157f55be0>\npattern = 'Button test', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Button test'], res = []\ndebug_str = 'Not found \"Button test\"\\nBytes in current buffer (color code eliminated): m/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-16-35-122778/test_gpio/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:153: in expect_exact\n    return self.pexpect_proc.expect_exact(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:432: in expect_exact\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f6157f56120>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f6157f55160>\\nsearcher: searcher_string:\\n    0: b'Button test'\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f6157f55160>\nE           searcher: searcher_string:\nE               0: b'Button test'\nE           <pytest_embedded.log.PexpectProcess object at 0x7f6157f55160>\nE           searcher: searcher_string:\nE               0: b'Button test'\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6157f55be0>\n\n    def test_gpio(dut):\n        LOGGER = logging.getLogger(__name__)\n    \n>       dut.expect_exact(\"Button test\")\n\ntests/validation/gpio/test_gpio.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f6157f55be0>\npattern = 'Button test', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Button test'], res = []\ndebug_str = 'Not found \"Button test\"\\nBytes in current buffer (color code eliminated): m/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-16-35-122778/test_gpio/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"Button test\"\nE               Bytes in current buffer (color code eliminated): m/pricing.\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-16-35-122778/test_gpio/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.i2c_master.test_i2c_master",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/i2c_master/esp32/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/i2c_master/esp32c3/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/i2c_master/esp32c6/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/i2c_master/esp32h2/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/i2c_master/esp32p4/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/i2c_master/esp32s2/i2c_master.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/i2c_master/esp32s3/i2c_master.xml [took 4m 0s]",
      "title": "All 7 runs failed: test_i2c_master (validation.i2c_master.test_i2c_master)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... ESP-ROM:esp32c3-api1-20210207 Build:Feb 7 2021 rst:0x1... (total 476 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-21-16-887615/test_i2c_master/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fc014ba1be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re....al 476 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-21-16-887615/test_i2c_master/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7fc014ba1fd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7fc014ba1160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7fc014ba1160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7fc014ba1160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fc014ba1be0>\n\n    def test_i2c_master(dut):\n>       dut.expect_unity_test_output(timeout=240)\n\ntests/validation/i2c_master/test_i2c_master.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fc014ba1be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re....al 476 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-21-16-887615/test_i2c_master/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... ESP-ROM:esp32c3-api1-20210207 Build:Feb 7 2021 rst:0x1... (total 476 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-21-16-887615/test_i2c_master/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.uart.test_uart",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/uart/esp32/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/uart/esp32c3/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/uart/esp32c6/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/uart/esp32h2/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/uart/esp32p4/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/uart/esp32s2/uart.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/uart/esp32s3/uart.xml [took 2m 0s]",
      "title": "7 out of 11 runs failed: test_uart (validation.uart.test_uart)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-37-20-612143/test_uart/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f66b1cbdbe0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re..... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-37-20-612143/test_uart/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f66b1cbdfd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f66b1cbd160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f66b1cbd160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7f66b1cbd160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f66b1cbdbe0>\n\n    def test_uart(dut):\n>       dut.expect_unity_test_output(timeout=120)\n\ntests/validation/uart/test_uart.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f66b1cbdbe0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re..... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-37-20-612143/test_uart/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-37-20-612143/test_uart/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.uart.test_uart",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32/uart.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32c3/uart.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32s2/uart.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32s3/uart.xml [took 20s]",
      "title": "4 out of 11 runs with error: test_uart (validation.uart.test_uart)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f9652f190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f9622fdf0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f96153c70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f96dfd810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f9652f850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f9622fdf0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_03-05-01-939484/test_uart', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.coremark.test_coremark",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/coremark/esp32c3/coremark.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32s2/coremark.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32s3/coremark.xml [took 20s]",
      "title": "3 out of 7 runs with error: test_coremark (performance.coremark.test_coremark)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f9b8e8e50>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f9b5a8400>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f9b513d00>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f9c1b5b10>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f9b8eb3a0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f9b5a8400>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_03-08-18-750689/test_coremark', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.unity.test_unity",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/unity/esp32/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c3-validation/validation/unity/esp32c3/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32c6-validation/validation/unity/esp32c6/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/unity/esp32h2/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/unity/esp32p4/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/unity/esp32s2/unity.xml [took 4m 0s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/unity/esp32s3/unity.xml [took 4m 0s]",
      "title": "7 out of 11 runs failed: test_unity (validation.unity.test_unity)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-43-21-530230/test_unity/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8a7d4b5be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-43-21-530230/test_unity/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f8a7d4b5fd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f8a7d4b5160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f8a7d4b5160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7f8a7d4b5160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8a7d4b5be0>\n\n    def test_unity(dut):\n>       dut.expect_unity_test_output(timeout=240)\n\ntests/validation/unity/test_unity.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8a7d4b5be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 240}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-43-21-530230/test_unity/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-43-21-530230/test_unity/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.unity.test_unity",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/unity/esp32/unity.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32c3/unity.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32s2/unity.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32s3/unity.xml [took 20s]",
      "title": "4 out of 11 runs with error: test_unity (validation.unity.test_unity)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fa1dfb280>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fa1afbfa0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fa1a23c70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fa26c1de0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fa1dfb790>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fa1afbfa0>\ntarget = 'esp32', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-53-58-380904/test_unity', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_double.test_linpack_double",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32/linpack_double.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32c3/linpack_double.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32s2/linpack_double.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32s3/linpack_double.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_linpack_double (performance.linpack_double.test_linpack_double)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f97873910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f975304c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f974b4160>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f981424d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f97873370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f975304c0>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-43-22-347245/test_linpack_double', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.psramspeed.test_psramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32/psramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32s2/psramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32s3/psramspeed.xml [took 20s]",
      "title": "3 out of 4 runs with error: test_psramspeed (performance.psramspeed.test_psramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fade917e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fadb504f0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fadad8280>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fae761d80>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fade93400>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fadb504f0>\ntarget = 'esp32', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-38-47-026565/test_psramspeed', port_target_cache={'/dev/ttyUSB0': 'esp32'}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.superpi.test_superpi",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/superpi/esp32/superpi.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32c3/superpi.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32s2/superpi.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32s3/superpi.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_superpi (performance.superpi.test_superpi)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f991bce50>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f98e80400>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f98de7b50>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f99a69b10>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f991bf3a0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f98e80400>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-38-57-889068/test_superpi', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "/home/runner/work/arduino-esp32/arduino-esp32/tests/validation/uart/uart.ino",
      "start_line": 78,
      "end_line": 78,
      "annotation_level": "warning",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32p4/uart.xml",
      "title": "1 out of 3 runs failed: change_pins_test",
      "raw_details": "Expected 'Hello from Serial1 using new pins' Was '\\xFFHello from Serial1 using new pins'"
    },
    {
      "path": "validation.hello_world.test_hello_world",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/hello_world/esp32/hello_world.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32h2-validation/validation/hello_world/esp32h2/hello_world.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/hello_world/esp32p4/hello_world.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/hello_world/esp32s2/hello_world.xml [took 30s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/hello_world/esp32s3/hello_world.xml [took 30s]",
      "title": "5 out of 14 runs failed: test_hello_world (validation.hello_world.test_hello_world)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"Hello Arduino!\"\nBytes in current buffer (color code eliminated): .com/pricing.\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-17-36-706687/test_hello_world/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd87cb31be0>\npattern = 'Hello Arduino!', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Hello Arduino!'], res = []\ndebug_str = 'Not found \"Hello Arduino!\"\\nBytes in current buffer (color code eliminated): .com/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-17-36-706687/test_hello_world/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:153: in expect_exact\n    return self.pexpect_proc.expect_exact(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:432: in expect_exact\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7fd87cb31fd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7fd87cb31160>\\nsearcher: searcher_string:\\n    0: b'Hello Arduino!'\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7fd87cb31160>\nE           searcher: searcher_string:\nE               0: b'Hello Arduino!'\nE           <pytest_embedded.log.PexpectProcess object at 0x7fd87cb31160>\nE           searcher: searcher_string:\nE               0: b'Hello Arduino!'\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd87cb31be0>\n\n    def test_hello_world(dut):\n>       dut.expect_exact(\"Hello Arduino!\")\n\ntests/validation/hello_world/test_hello_world.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7fd87cb31be0>\npattern = 'Hello Arduino!', expect_all = False, not_matching = (), args = ()\nkwargs = {}, patterns = ['Hello Arduino!'], res = []\ndebug_str = 'Not found \"Hello Arduino!\"\\nBytes in current buffer (color code eliminated): .com/pricing.\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-17-36-706687/test_hello_world/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"Hello Arduino!\"\nE               Bytes in current buffer (color code eliminated): .com/pricing.\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-17-36-706687/test_hello_world/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.hello_world.test_hello_world",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32/hello_world.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32c3/hello_world.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32s2/hello_world.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32s3/hello_world.xml [took 20s]",
      "title": "4 out of 14 runs with error: test_hello_world (validation.hello_world.test_hello_world)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f964332e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f960f0580>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f96074310>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f96d01f30>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f96433970>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f960f0580>\ntarget = 'esp32', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-45-20-715006/test_hello_world', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.touch.test_touch",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/touch/esp32/touch.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/touch/esp32s2/touch.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/touch/esp32s3/touch.xml [took 20s]",
      "title": "All 3 runs with error: test_touch (validation.touch.test_touch)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f81c27280>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f8192bf40>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f8184fc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f824d1de0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f81c27790>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f8192bf40>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_03-03-57-171063/test_touch', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_float.test_linpack_float",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32/linpack_float.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32c3/linpack_float.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32s2/linpack_float.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32s3/linpack_float.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_linpack_float (performance.linpack_float.test_linpack_float)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fb780b910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fb74cc4c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fb7450160>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fb80b64d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fb780b370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fb74cc4c0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_03-11-33-879024/test_linpack_float', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.psram.test_psram",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32-validation/validation/psram/esp32/psram.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32p4-validation/validation/psram/esp32p4/psram.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32s2-validation/validation/psram/esp32s2/psram.xml [took 2m 0s]\n./artifacts/tests-results-wokwi-esp32s3-validation/validation/psram/esp32s3/psram.xml [took 2m 0s]",
      "title": "4 out of 7 runs failed: test_psram (validation.psram.test_psram)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-32-21-051248/test_psram/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f3603631be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-32-21-051248/test_psram/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f3603631fd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f3603631160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f3603631160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7f3603631160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f3603631be0>\n\n    def test_psram(dut):\n>       dut.expect_unity_test_output(timeout=120)\n\ntests/validation/psram/test_psram.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f3603631be0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re.... (total 243 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-28_03-32-21-051248/test_psram/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250222-g0273d6d1 Starting simulation... API Error: You have used up your Free plan monthly CI minute... (total 243 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-28_03-32-21-051248/test_psram/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.psram.test_psram",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/psram/esp32/psram.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/psram/esp32s2/psram.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/psram/esp32s3/psram.xml [took 20s]",
      "title": "3 out of 7 runs with error: test_psram (validation.psram.test_psram)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f8db27190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f8d827f40>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f8d74fc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f8e3f1810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f8db27850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f8d827f40>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_03-01-47-892416/test_psram', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.democfg.test_democfg",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/democfg/esp32/democfg0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32/democfg1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32s2/democfg.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32s3/democfg.xml [took 20s]",
      "title": "4 out of 5 runs with error: test_cfg (validation.democfg.test_democfg)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fa565b190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fa535bee0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fa5283be0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fa5f21810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fa565b850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fa535bee0>\ntarget = 'esp32', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-28_02-43-11-673517/test_cfg', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": ".github",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "notice",
      "message": "There are 46 tests, see \"Raw output\" for the full list of tests.",
      "title": "46 tests found",
      "raw_details": "basic_transmission_test\nbegin_when_running_test\nchange_baudrate_test\nchange_cpu_frequency_test\nchange_pins_test\ndisabled_uart_calls_test\nenabled_uart_calls_test\nend_when_stopped_test\nperformance.coremark.test_coremark ‑ test_coremark\nperformance.fibonacci.test_fibonacci ‑ test_fibonacci\nperformance.linpack_double.test_linpack_double ‑ test_linpack_double\nperformance.linpack_float.test_linpack_float ‑ test_linpack_float\nperformance.psramspeed.test_psramspeed ‑ test_psramspeed\nperformance.ramspeed.test_ramspeed ‑ test_ramspeed\nperformance.superpi.test_superpi ‑ test_superpi\nperiman_test\npsram_found\nresize_buffers_test\ntest_calloc_success\ntest_fail\ntest_malloc_fail\ntest_malloc_success\ntest_memset_all_ones\ntest_memset_all_zeroes\ntest_memset_alternating\ntest_pass\ntest_realloc_success\ntest_touch_errors\ntest_touch_interrtupt\ntest_touch_read\ntimer_clock_select_test\ntimer_divider_test\ntimer_interrupt_test\ntimer_read_test\nvalidation.democfg.test_democfg ‑ test_cfg\nvalidation.gpio.test_gpio ‑ test_gpio\nvalidation.hello_world.test_hello_world ‑ test_hello_world\nvalidation.i2c_master.test_i2c_master ‑ test_i2c_master\nvalidation.nvs.test_nvs ‑ test_nvs\nvalidation.periman.test_periman ‑ test_periman\nvalidation.psram.test_psram ‑ test_psram\nvalidation.timer.test_timer ‑ test_timer\nvalidation.touch.test_touch ‑ test_touch\nvalidation.uart.test_uart ‑ test_uart\nvalidation.unity.test_unity ‑ test_unity\nvalidation.wifi.test_wifi ‑ test_wifi"
    }
  ],
  "check_url": "https://github.com/espressif/arduino-esp32/runs/37966926174",
  "formatted": {
    "stats": {
      "files": "190",
      "errors": [],
      "suites": "190",
      "duration": "12 024",
      "suite_details": [
        {
          "name": "performance_hardware_esp32c3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_wifi2",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_democfg1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_touch0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_psram0",
          "tests": 8,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_i2c_master0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        }
      ],
      "tests": "46",
      "tests_succ": "26",
      "tests_skip": "0",
      "tests_fail": "4",
      "tests_error": "16",
      "runs": "238",
      "runs_succ": "98",
      "runs_skip": "0",
      "runs_fail": "75",
      "runs_error": "65",
      "commit": "7575fa0ce8fc8eb3cf886fe28ef1bd881cbbe01d"
    }
  }
}