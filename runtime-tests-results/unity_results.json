{
  "title": "16 errors, 2 fail, 34 pass in 1h 16m 24s",
  "summary": "193 files  193 suites   1h 16m 24s ⏱️\n 52 tests  34 ✅ 0 💤 2 ❌ 16 🔥\n395 runs  327 ✅ 0 💤 4 ❌ 64 🔥\n\nResults for commit 003db9e4.\n",
  "conclusion": "failure",
  "stats": {
    "files": 193,
    "errors": [],
    "suites": 193,
    "duration": 4584,
    "suite_details": [
      {
        "name": "performance_hardware_esp32c3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c3_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_wifi1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_touch0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_psram0",
        "tests": 9,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32p4_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_uart0",
        "tests": 11,
        "skipped": 0,
        "failures": 2,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_psram0",
        "tests": 9,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_timer0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_psram0",
        "tests": 9,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_uart0",
        "tests": 11,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32_democfg1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_psram0",
        "tests": 9,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 1,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_psram0",
        "tests": 9,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s3_i2c_master0",
        "tests": 5,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_democfg1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32s2_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_timer0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32h2_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_wokwi_esp32c6_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32p4_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c6_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_touch0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32h2_gpio0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32_wifi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32s3_wifi2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_wokwi_esp32c3_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      }
    ],
    "tests": 52,
    "tests_succ": 34,
    "tests_skip": 0,
    "tests_fail": 2,
    "tests_error": 16,
    "runs": 395,
    "runs_succ": 327,
    "runs_skip": 0,
    "runs_fail": 4,
    "runs_error": 64,
    "commit": "003db9e4c0c352344b984ba1ac25f6a3f706dfe5"
  },
  "annotations": [
    {
      "path": "performance.ramspeed.test_ramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32c3/ramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32h2/ramspeed.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32s2/ramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32s3/ramspeed.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_ramspeed (performance.ramspeed.test_ramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f85bf4e50>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f858b8400>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f8581fd00>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f864a1b10>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f85bf73a0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f858b8400>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-31-28-325254/test_ramspeed', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.hello_world.test_hello_world",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32c3/hello_world.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32h2/hello_world.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32s2/hello_world.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32s3/hello_world.xml [took 20s]",
      "title": "4 out of 14 runs with error: test_hello_world (validation.hello_world.test_hello_world)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f8391fda080>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f83918c7d60>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f8391400160>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f8391fda500>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f8391fd96c0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f83918c7d60>\ntarget = 'esp32h2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-28-25-099213/test_hello_world', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.democfg.test_democfg",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/democfg/esp32c3/democfg.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32s2/democfg.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32s3/democfg.xml [took 20s]",
      "title": "3 out of 14 runs with error: test_cfg (validation.democfg.test_democfg)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fbb244e20>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fbaf47ee0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fbae6fbe0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fbbb11f00>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fbb247760>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fbaf47ee0>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_03-14-15-683112/test_cfg', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.unity.test_unity",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/unity/esp32c3/unity.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32h2/unity.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32s2/unity.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32s3/unity.xml [took 20s]",
      "title": "All 4 runs with error: test_unity (validation.unity.test_unity)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f69febe56c0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f69fe068100>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f69fdfefbe0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f69febe6230>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f69fe4cf400>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f69fe068100>\ntarget = 'esp32h2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-30-27-067725/test_unity', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.superpi.test_superpi",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/superpi/esp32c3/superpi.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32h2/superpi.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32s2/superpi.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32s3/superpi.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_superpi (performance.superpi.test_superpi)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f975fce50>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f972bc400>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f97227b50>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f97ec9b10>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f975ff3a0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f972bc400>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-50-05-519804/test_superpi', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.nvs.test_nvs",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c3/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c3/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs0.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs1.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs2.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs3.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs0.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs1.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s3/nvs2.xml [took 20s]",
      "title": "11 out of 36 runs with error: test_nvs (validation.nvs.test_nvs)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f84ae3190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f847e3eb0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f8470bc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f853ad810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f84ae3850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f847e3eb0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_03-05-27-076723/test_nvs', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.periman.test_periman",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/periman/esp32c3/periman.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32h2/periman.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32s2/periman.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32s3/periman.xml [took 20s]",
      "title": "4 out of 6 runs with error: test_periman (validation.periman.test_periman)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f7e0b3280>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f7ddb3f70>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f7dcd7be0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f7e981de0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f7e0b3790>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f7ddb3f70>\ntarget = 'esp32c3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-56-40-266821/test_periman', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "/home/runner/work/arduino-esp32/arduino-esp32/tests/validation/uart/uart.ino",
      "start_line": 78,
      "end_line": 78,
      "annotation_level": "warning",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32/uart.xml",
      "title": "1 out of 10 runs failed: periman_test",
      "raw_details": "Expected 'Hello from Serial2 while I2C is disabled' Was ''"
    },
    {
      "path": "/home/runner/work/arduino-esp32/arduino-esp32/tests/validation/uart/uart.ino",
      "start_line": 78,
      "end_line": 78,
      "annotation_level": "warning",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32/uart.xml\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32p4/uart.xml",
      "title": "2 out of 10 runs failed: change_pins_test",
      "raw_details": "Expected 'Hello from Serial1 using new pins' Was '\\xFFHello from Serial1 using new pins'"
    },
    {
      "path": "performance.coremark.test_coremark",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/coremark/esp32c3/coremark.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32h2/coremark.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32s2/coremark.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32s3/coremark.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_coremark (performance.coremark.test_coremark)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f9fbcf910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f9f8904c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f9f7f7d00>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fa047a4d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f9fbcf370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f9f8904c0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-34-52-317633/test_coremark', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.timer.test_timer",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/timer/esp32c3/timer.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32h2/timer.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32s2/timer.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32s3/timer.xml [took 20s]",
      "title": "All 4 runs with error: test_timer (validation.timer.test_timer)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f2631a06a70>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f2630e88070>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f2630e0fbe0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f2631a06260>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f2631a063e0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f2630e88070>\ntarget = 'esp32h2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-29-56-560415/test_timer', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.fibonacci.test_fibonacci",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32c3/fibonacci.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32h2/fibonacci.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32s2/fibonacci.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32s3/fibonacci.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_fibonacci (performance.fibonacci.test_fibonacci)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fb01457e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fafe044f0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fafd6fe20>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fb0a11d80>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fb0147400>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fafe044f0>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-44-40-916980/test_fibonacci', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.uart.test_uart",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32c3/uart.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32h2/uart.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32s2/uart.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32s3/uart.xml [took 20s]",
      "title": "All 4 runs with error: test_uart (validation.uart.test_uart)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fb70a7190>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fb6da7f40>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fb6ccbc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fb7971810>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fb70a7850>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fb6da7f40>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_03-23-58-405946/test_uart', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_double.test_linpack_double",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32c3/linpack_double.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32h2/linpack_double.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32s2/linpack_double.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32s3/linpack_double.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_linpack_double (performance.linpack_double.test_linpack_double)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7fba1f826080>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fba1f113d60>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fba1ec4c0d0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fba1f826500>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fba1f8256c0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fba1f113d60>\ntarget = 'esp32h2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-26-47-099123/test_linpack_double', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_float.test_linpack_float",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32c3/linpack_float.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32h2/linpack_float.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32s2/linpack_float.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32s3/linpack_float.xml [took 20s]",
      "title": "4 out of 7 runs with error: test_linpack_float (performance.linpack_float.test_linpack_float)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f93f5d7e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f93c1c4f0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f93ba4160>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f94821d80>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f93f5f400>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f93c1c4f0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-38-06-631415/test_linpack_float', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.touch.test_touch",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/touch/esp32s2/touch.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/touch/esp32s3/touch.xml [took 20s]",
      "title": "All 2 runs with error: test_touch (validation.touch.test_touch)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7f92c87310>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f92948490>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f928afc70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f93531630>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f92c877c0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f92948490>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_03-09-45-962207/test_touch', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.psramspeed.test_psramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32s2/psramspeed.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32s3/psramspeed.xml [took 20s]",
      "title": "2 out of 4 runs with error: test_psramspeed (performance.psramspeed.test_psramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fa7c5b910>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fa79184c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fa78a0160>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fa85264d0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fa7c5b370>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fa79184c0>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_02-47-55-724260/test_psramspeed', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.psram.test_psram",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "warning",
      "message": "./artifacts/tests-results-wokwi-esp32p4-validation/validation/psram/esp32p4/psram.xml [took 2m 0s]",
      "title": "1 out of 3 runs failed: test_psram (validation.psram.test_psram)",
      "raw_details": "pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nBytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250219-g1e3dc2ab Starting simulation... ESP-ROM:esp32p4-eco1-20240205 Build:Feb 5 2024 rst:0x1... (total 1099 bytes)\nPlease check the full log here: /tmp/pytest-embedded/2025-02-22_03-29-30-289597/test_psram/dut.log\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8e7b9adbe0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re....(total 1099 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-22_03-29-30-289597/test_psram/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n>               index = func(self, pattern, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:131: in expect\n    return self.pexpect_proc.expect(pattern, **kwargs)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:354: in expect\n    return self.expect_list(compiled_pattern_list,\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/spawnbase.py:383: in expect_list\n    return exp.expect_loop(timeout)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:181: in expect_loop\n    return self.timeout(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pexpect.expect.Expecter object at 0x7f8e7b9adfd0>\nerr = TIMEOUT(\"<pytest_embedded.log.PexpectProcess object at 0x7f8e7b9ad160>\\nsearcher: searcher_re:\\n    0: re.compile(b'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)')\")\n\n    def timeout(self, err=None):\n        spawn = self.spawn\n    \n        spawn.before = spawn._before.getvalue()\n        spawn.after = TIMEOUT\n        index = self.searcher.timeout_index\n        if index >= 0:\n            spawn.match = TIMEOUT\n            spawn.match_index = index\n            return index\n        else:\n            spawn.match = None\n            spawn.match_index = None\n            msg = str(spawn)\n            msg += '\\nsearcher: %s' % self.searcher\n            if err is not None:\n                msg = str(err) + '\\n' + msg\n    \n            exc = TIMEOUT(msg)\n            exc.__cause__ = None    # in Python 3.x we can use \"raise exc from None\"\n>           raise exc\nE           pexpect.exceptions.TIMEOUT: <pytest_embedded.log.PexpectProcess object at 0x7f8e7b9ad160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\nE           <pytest_embedded.log.PexpectProcess object at 0x7f8e7b9ad160>\nE           searcher: searcher_re:\nE               0: re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)')\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pexpect/expect.py:144: TIMEOUT\n\nThe above exception was the direct cause of the following exception:\n\ndut = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8e7b9adbe0>\n\n    def test_psram(dut):\n>       dut.expect_unity_test_output(timeout=120)\n\ntests/validation/psram/test_psram.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:180: in expect_unity_test_output\n    self.expect(UNITY_SUMMARY_LINE_REGEX, timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_wokwi.dut.WokwiDut object at 0x7f8e7b9adbe0>\npattern = re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\nexpect_all = False, not_matching = (), args = (), kwargs = {'timeout': 120}\npatterns = [re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)]\nres = []\ndebug_str = 'Not found \"re.compile(b\\'^[-]+\\\\\\\\s*(\\\\\\\\d+) Tests (\\\\\\\\d+) Failures (\\\\\\\\d+) Ignored\\\\\\\\s*(?P<result>OK|FAIL)\\', re....(total 1099 bytes)\\nPlease check the full log here: /tmp/pytest-embedded/2025-02-22_03-29-30-289597/test_psram/dut.log'\n\n    @functools.wraps(func)\n    def wrapper(\n        self, pattern, *args, expect_all: bool = False, not_matching: List[Union[str, re.Pattern]] = (), **kwargs\n    ) -> Union[Union[Match, AnyStr], List[Union[Match, AnyStr]]]:\n        patterns = to_list(pattern)\n        res = []\n        while patterns:\n            try:\n                index = func(self, pattern, *args, **kwargs)\n            except (pexpect.EOF, pexpect.TIMEOUT) as e:\n                debug_str = (\n                    f'Not found \"{pattern!s}\"\\n'\n                    f'Bytes in current buffer (color code eliminated): {self.pexpect_proc.buffer_debug_str}\\n'\n                    f'Please check the full log here: {self.logfile}'\n                )\n>               raise e.__class__(debug_str) from e\nE               pexpect.exceptions.TIMEOUT: Not found \"re.compile(b'^[-]+\\\\s*(\\\\d+) Tests (\\\\d+) Failures (\\\\d+) Ignored\\\\s*(?P<result>OK|FAIL)', re.MULTILINE)\"\nE               Bytes in current buffer (color code eliminated): Wokwi CLI v0.15.3 (d85c2346ef21) Connected to Wokwi Simulation API 1.0.0-20250219-g1e3dc2ab Starting simulation... ESP-ROM:esp32p4-eco1-20240205 Build:Feb 5 2024 rst:0x1... (total 1099 bytes)\nE               Please check the full log here: /tmp/pytest-embedded/2025-02-22_03-29-30-289597/test_psram/dut.log\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pytest_embedded/dut.py:83: TIMEOUT"
    },
    {
      "path": "validation.psram.test_psram",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/psram/esp32s2/psram.xml [took 20s]\n./artifacts/parent-artifacts/results/hw/validation/psram/esp32s3/psram.xml [took 20s]",
      "title": "2 out of 3 runs with error: test_psram (validation.psram.test_psram)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...arduino.app.ArduinoApp object at 0x7fab03f2e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7faacfc580>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7faac67c70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fab905f30>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fab03f970>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7faacfc580>\ntarget = 'esp32s3', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-02-22_03-20-44-098971/test_psram', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\nports = ['/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyUSB2', '/dev/ttyUSB3']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": ".github",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "notice",
      "message": "There are 52 tests, see \"Raw output\" for the full list of tests.",
      "title": "52 tests found",
      "raw_details": "auto_baudrate_test\nbasic_transmission_test\nbegin_when_running_test\nchange_baudrate_test\nchange_clock\nchange_cpu_frequency_test\nchange_pins_test\ndisabled_uart_calls_test\nenabled_uart_calls_test\nend_when_stopped_test\nperformance.coremark.test_coremark ‑ test_coremark\nperformance.fibonacci.test_fibonacci ‑ test_fibonacci\nperformance.linpack_double.test_linpack_double ‑ test_linpack_double\nperformance.linpack_float.test_linpack_float ‑ test_linpack_float\nperformance.psramspeed.test_psramspeed ‑ test_psramspeed\nperformance.ramspeed.test_ramspeed ‑ test_ramspeed\nperformance.superpi.test_superpi ‑ test_superpi\nperiman_test\nresize_buffers_test\nrtc_run_clock\nrtc_set_time\nswap_pins\ntest_api\ntest_calloc_success\ntest_fail\ntest_malloc_fail\ntest_malloc_success\ntest_memcpy\ntest_memset_all_ones\ntest_memset_all_zeroes\ntest_memset_alternating\ntest_memset_random\ntest_pass\ntest_realloc_success\ntest_touch_errors\ntest_touch_interrtupt\ntest_touch_read\ntimer_clock_select_test\ntimer_divider_test\ntimer_interrupt_test\ntimer_read_test\nvalidation.democfg.test_democfg ‑ test_cfg\nvalidation.gpio.test_gpio ‑ test_gpio\nvalidation.hello_world.test_hello_world ‑ test_hello_world\nvalidation.nvs.test_nvs ‑ test_nvs\nvalidation.periman.test_periman ‑ test_periman\nvalidation.psram.test_psram ‑ test_psram\nvalidation.timer.test_timer ‑ test_timer\nvalidation.touch.test_touch ‑ test_touch\nvalidation.uart.test_uart ‑ test_uart\nvalidation.unity.test_unity ‑ test_unity\nvalidation.wifi.test_wifi ‑ test_wifi"
    }
  ],
  "check_url": "https://github.com/espressif/arduino-esp32/runs/37640508633",
  "formatted": {
    "stats": {
      "files": "193",
      "errors": [],
      "suites": "193",
      "duration": "4 584",
      "suite_details": [
        {
          "name": "performance_hardware_esp32c3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c3_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_wifi1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_touch0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_psram0",
          "tests": 9,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32p4_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_uart0",
          "tests": 11,
          "skipped": 0,
          "failures": 2,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_psram0",
          "tests": 9,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_timer0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_psram0",
          "tests": 9,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_uart0",
          "tests": 11,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32_democfg1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_psram0",
          "tests": 9,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 1,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_psram0",
          "tests": 9,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s3_i2c_master0",
          "tests": 5,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_democfg1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32s2_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_timer0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32h2_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_wokwi_esp32c6_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32p4_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c6_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_touch0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32h2_gpio0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32_wifi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32s3_wifi2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_wokwi_esp32c3_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        }
      ],
      "tests": "52",
      "tests_succ": "34",
      "tests_skip": "0",
      "tests_fail": "2",
      "tests_error": "16",
      "runs": "395",
      "runs_succ": "327",
      "runs_skip": "0",
      "runs_fail": "4",
      "runs_error": "64",
      "commit": "003db9e4c0c352344b984ba1ac25f6a3f706dfe5"
    }
  }
}